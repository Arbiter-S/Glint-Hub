openapi: 3.0.3
info:
  title: GlintHub
  version: 0.2.0
  description: GlintHub is an API to manage an online shop selling gold related products
paths:
  /api/docs/:
    get:
      operationId: api_docs_retrieve
      description: |-
        OpenApi3 schema for this API. Format can be selected via content negotiation.

        - YAML: application/vnd.oai.openapi
        - JSON: application/vnd.oai.openapi+json
      parameters:
      - in: query
        name: format
        schema:
          type: string
          enum:
          - json
          - yaml
      - in: query
        name: lang
        schema:
          type: string
          enum:
          - af
          - ar
          - ar-dz
          - ast
          - az
          - be
          - bg
          - bn
          - br
          - bs
          - ca
          - ckb
          - cs
          - cy
          - da
          - de
          - dsb
          - el
          - en
          - en-au
          - en-gb
          - eo
          - es
          - es-ar
          - es-co
          - es-mx
          - es-ni
          - es-ve
          - et
          - eu
          - fa
          - fi
          - fr
          - fy
          - ga
          - gd
          - gl
          - he
          - hi
          - hr
          - hsb
          - hu
          - hy
          - ia
          - id
          - ig
          - io
          - is
          - it
          - ja
          - ka
          - kab
          - kk
          - km
          - kn
          - ko
          - ky
          - lb
          - lt
          - lv
          - mk
          - ml
          - mn
          - mr
          - ms
          - my
          - nb
          - ne
          - nl
          - nn
          - os
          - pa
          - pl
          - pt
          - pt-br
          - ro
          - ru
          - sk
          - sl
          - sq
          - sr
          - sr-latn
          - sv
          - sw
          - ta
          - te
          - tg
          - th
          - tk
          - tr
          - tt
          - udm
          - ug
          - uk
          - ur
          - uz
          - vi
          - zh-hans
          - zh-hant
      tags:
      - api
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/vnd.oai.openapi:
              schema:
                type: object
                additionalProperties: {}
            application/yaml:
              schema:
                type: object
                additionalProperties: {}
            application/vnd.oai.openapi+json:
              schema:
                type: object
                additionalProperties: {}
            application/json:
              schema:
                type: object
                additionalProperties: {}
          description: ''
  /cart/:
    get:
      operationId: cart_retrieve
      description: |-
        Shows current user's cart.
        This endpoint requires authentication.


        Returns:
            200 OK: Current user's Cart object
            401 Unauthorized: if authentication fails.
      tags:
      - cart
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cart'
          description: ''
  /cart/add/:
    post:
      operationId: cart_add_create
      description: |-
        Adds a product to current user's cart.
        This endpoint requires authentication.

        Request Body:
            product (int): ID of the product to add
            product_quantity (int): Number of products to add

        Returns:
            201 Created: product id and quantity of the added product
            400 Bad Request: If body's format is incorrect or a product with that id is not found.
            401 Unauthorized: If authentication fails.
            500 Internal Server Error: If user already has that product in their cart.
      tags:
      - cart
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductCart'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ProductCart'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ProductCart'
        required: true
      security:
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductCart'
          description: ''
  /orders/place:
    post:
      operationId: orders_place_create
      tags:
      - orders
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Order'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Order'
      security:
      - jwtAuth: []
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
          description: ''
  /products/:
    get:
      operationId: products_list
      description: |-
        Returns a list of all products.
        This endpoint accepts url parameters.

        Returns:
            200 OK: List of Product objects
      parameters:
      - in: query
        name: category
        schema:
          type: string
          enum:
          - bracelet
          - earring
          - necklace
          - watch
        description: |-
          * `necklace` - Necklace
          * `bracelet` - Bracelet
          * `watch` - Watch
          * `earring` - Earring
      - in: query
        name: name
        schema:
          type: string
      - in: query
        name: price_range_max
        schema:
          type: string
        description: Price Range
      - in: query
        name: price_range_min
        schema:
          type: string
        description: Price Range
      tags:
      - products
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'
          description: ''
  /products/{id}:
    get:
      operationId: products_retrieve
      description: |-
        Returns a single Product object.
        Product ID is required in the URL.

        Returns:
            200 OK: Product object
            404 Not Found: No product found with the requested ID
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - products
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
          description: ''
  /users/api/login-refresh/:
    post:
      operationId: users_api_login_refresh_create
      description: |-
        Takes a refresh type JSON web token and returns an access type JSON web
        token if the refresh token is valid.
      tags:
      - users
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenRefresh'
          description: ''
  /users/login/:
    post:
      operationId: users_login_create
      description: |-
        Takes a set of user credentials and returns an access and refresh JSON web
        token pair to prove the authentication of those credentials.
      tags:
      - users
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenObtainPair'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenObtainPair'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TokenObtainPair'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenObtainPair'
          description: ''
  /users/register/:
    post:
      operationId: users_register_create
      description: |-
        Creates a new User object.

        Request Body:
            username (str): username for the new user
            password (str): password for the new user

        Returns:
            201 Created: Username and a success message
            400 Bad Request: If the username is not unique.
            401 Unauthorized: If password is not validated.
      tags:
      - users
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRegister'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UserRegister'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UserRegister'
        required: true
      security:
      - jwtAuth: []
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserRegister'
          description: ''
components:
  schemas:
    Cart:
      type: object
      properties:
        products:
          type: array
          items:
            type: integer
          readOnly: true
      required:
      - products
    CategoryEnum:
      enum:
      - necklace
      - bracelet
      - watch
      - earring
      type: string
      description: |-
        * `necklace` - Necklace
        * `bracelet` - Bracelet
        * `watch` - Watch
        * `earring` - Earring
    Order:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        total_price:
          type: string
          format: decimal
          pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
          readOnly: true
        status:
          allOf:
          - $ref: '#/components/schemas/StatusEnum'
          readOnly: true
      required:
      - id
      - status
      - total_price
    Product:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
          maxLength: 55
        description:
          type: string
        weight:
          type: string
          format: decimal
          pattern: ^-?\d{0,3}(?:\.\d{0,2})?$
        color:
          type: string
          maxLength: 25
        in_stock:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
          format: int64
          nullable: true
        category:
          $ref: '#/components/schemas/CategoryEnum'
        purity:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
          format: int64
        picture:
          type: string
          format: uri
          nullable: true
        created_at:
          type: string
          format: date-time
          readOnly: true
      required:
      - category
      - color
      - created_at
      - description
      - id
      - name
      - purity
      - weight
    ProductCart:
      type: object
      properties:
        product:
          type: integer
        product_quantity:
          type: integer
          maximum: 9223372036854775807
          minimum: 0
          format: int64
      required:
      - product
      - product_quantity
    StatusEnum:
      enum:
      - pending
      - processing
      - shipped
      - delivered
      - cancelled
      - invalid
      type: string
      description: |-
        * `pending` - Pending
        * `processing` - Processing
        * `shipped` - Shipped
        * `delivered` - Delivered
        * `cancelled` - Cancelled
        * `invalid` - Invalid
    TokenObtainPair:
      type: object
      properties:
        username:
          type: string
          writeOnly: true
        password:
          type: string
          writeOnly: true
        access:
          type: string
          readOnly: true
        refresh:
          type: string
          readOnly: true
      required:
      - access
      - password
      - refresh
      - username
    TokenRefresh:
      type: object
      properties:
        access:
          type: string
          readOnly: true
        refresh:
          type: string
          writeOnly: true
      required:
      - access
      - refresh
    UserRegister:
      type: object
      properties:
        username:
          type: string
          description: Required. 150 characters or fewer. Letters, digits and @/./+/-/_
            only.
          pattern: ^[\w.@+-]+$
          maxLength: 150
        password:
          type: string
          maxLength: 128
      required:
      - password
      - username
  securitySchemes:
    jwtAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
