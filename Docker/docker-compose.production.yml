services:
  django:
    build:
      context: ..
      dockerfile: Docker/Dockerfile
    command: bash -c "python manage.py migrate && python manage.py collectstatic --noinput && gunicorn config.wsgi --bind 0.0.0.0:8000 --access-logfile - --error-logfile -"
    environment:
      - SETTINGS=${SETTINGS}
      - SECRET_KEY=${SECRET_KEY}
      - DB_NAME=${DB_NAME}
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
    env_file: .env
    depends_on:
      - pgdb
      - redis
    volumes:
      - statics:/app/static

  web_server:
    build: ../nginx
    volumes:
      - statics:/app/static
    depends_on:
      - django
    ports:
      - '80:80'

  pgdb:
    image: postgres:alpine3.13
    env_file: .env
    environment:
      - POSTGRES_DB=${DB_NAME}
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
    volumes:
      - db:/var/lib/postgresql/data

  redis:
    image: redis:7.0-alpine3.19

  celery_worker:
    build:
      context: ..
      dockerfile: Docker/Dockerfile
    command: celery -A config worker --loglevel=info
    environment:
      - API_KEY=${API_KEY} #TODO: Apparently there is a more secure way to handle environment variables called secrets. Read more about it and implement it if it's not overkill.
      - SETTINGS=${SETTINGS}
      - SECRET_KEY=${SECRET_KEY}
    env_file: .env
    depends_on:
      - redis

  celery_beat:
    build:
      context: ..
      dockerfile: Docker/Dockerfile
    command: celery -A config beat --loglevel=info
    environment:
      - SETTINGS=${SETTINGS}
      - SECRET_KEY=${SECRET_KEY}
    env_file: .env
    depends_on:
      - celery_worker

  smtp_dev:
      image: rnwood/smtp4dev
      ports:
        - "5000:80" # user interface


volumes:
  db:
  statics: